/* automatically generated by rust-bindgen 0.71.1 */

pub const CHIP_SDK_CHIP_MAX: u32 = 4;
pub const CHIP_SDK_PHY_PORT_PER_CHIP: u32 = 8;
pub const CHIP_SDK_PHY_PORT_PER_GROUP_MAX: u32 = 4;
pub const ChipSdkError_CHIP_SDK_SUCCESS: ChipSdkError = 0;
pub const ChipSdkError_CHIP_SDK_ERROR: ChipSdkError = 1;
pub const ChipSdkError_CHIP_SDK_INVALID_PARAM: ChipSdkError = 2;
pub const ChipSdkError_CHIP_SDK_NO_MEMORY: ChipSdkError = 3;
pub const ChipSdkError_CHIP_SDK_NO_RESOURCE: ChipSdkError = 4;
pub const ChipSdkError_CHIP_SDK_NOT_FOUND: ChipSdkError = 5;
pub const ChipSdkError_CHIP_SDK_NOT_SUPPORTED: ChipSdkError = 6;
pub const ChipSdkError_CHIP_SDK_BUSY: ChipSdkError = 7;
pub const ChipSdkError_CHIP_SDK_TIMEOUT: ChipSdkError = 8;
pub const ChipSdkError_CHIP_SDK_NO_CHANGE: ChipSdkError = 9;
#[doc = " 错误码"]
pub type ChipSdkError = ::std::os::raw::c_uint;
pub const LinkStatus_LINK_DOWN: LinkStatus = 0;
pub const LinkStatus_LINK_UP: LinkStatus = 1;
#[doc = " PhyPort 的 Link 状态"]
pub type LinkStatus = ::std::os::raw::c_uint;
#[doc = " 物理端口"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhyPortTag {
    pub port_id: ::std::os::raw::c_int,
    pub speed: ::std::os::raw::c_int,
    pub status: LinkStatus,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PhyPortTag"][::std::mem::size_of::<PhyPortTag>() - 12usize];
    ["Alignment of PhyPortTag"][::std::mem::align_of::<PhyPortTag>() - 4usize];
    ["Offset of field: PhyPortTag::port_id"][::std::mem::offset_of!(PhyPortTag, port_id) - 0usize];
    ["Offset of field: PhyPortTag::speed"][::std::mem::offset_of!(PhyPortTag, speed) - 4usize];
    ["Offset of field: PhyPortTag::status"][::std::mem::offset_of!(PhyPortTag, status) - 8usize];
};
#[doc = " 物理端口"]
pub type PhyPort = PhyPortTag;
#[doc = " 交换芯片"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SwitchChipTag {
    pub chip_id: ::std::os::raw::c_int,
    pub numOfPorts: ::std::os::raw::c_int,
    pub ports: [PhyPort; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SwitchChipTag"][::std::mem::size_of::<SwitchChipTag>() - 104usize];
    ["Alignment of SwitchChipTag"][::std::mem::align_of::<SwitchChipTag>() - 4usize];
    ["Offset of field: SwitchChipTag::chip_id"]
        [::std::mem::offset_of!(SwitchChipTag, chip_id) - 0usize];
    ["Offset of field: SwitchChipTag::numOfPorts"]
        [::std::mem::offset_of!(SwitchChipTag, numOfPorts) - 4usize];
    ["Offset of field: SwitchChipTag::ports"]
        [::std::mem::offset_of!(SwitchChipTag, ports) - 8usize];
};
#[doc = " 交换芯片"]
pub type SwitchChip = SwitchChipTag;
#[doc = " MAC 地址"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MacTag {
    pub addr: [::std::os::raw::c_uchar; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MacTag"][::std::mem::size_of::<MacTag>() - 6usize];
    ["Alignment of MacTag"][::std::mem::align_of::<MacTag>() - 1usize];
    ["Offset of field: MacTag::addr"][::std::mem::offset_of!(MacTag, addr) - 0usize];
};
#[doc = " MAC 地址"]
pub type Mac = MacTag;
unsafe extern "C" {
    #[doc = " @brief 初始化 SDK，获得芯片信息\n @param SwitchChip** chips 芯片信息，出参\n @param int* chip_num 芯片数目，出参\n @return 错误码"]
    pub fn chip_sdk_init(
        chips: *mut SwitchChip,
        chip_num: *mut ::std::os::raw::c_int,
    ) -> ChipSdkError;
}
#[doc = " @brief 注册 PhyPort 的 Link 状态回调\n @param LinkStatusCallback callback 回调函数 (chip_id, port_id, status)\n @return 错误码"]
pub type LinkStatusCallback = ::std::option::Option<
    unsafe extern "C" fn(
        chip_id: ::std::os::raw::c_int,
        port_id: ::std::os::raw::c_int,
        status: LinkStatus,
    ),
>;
unsafe extern "C" {
    pub fn chip_sdk_register_link_status_callback(callback: LinkStatusCallback) -> ChipSdkError;
}
unsafe extern "C" {
    #[doc = " @brief 设置 PhyPort 的 MAC 地址\n @param int chip_id 芯片ID\n @param int port_id 端口ID\n @param Mac mac     MAC 地址\n @return 错误码"]
    pub fn chip_sdk_set_mac(
        chip_id: ::std::os::raw::c_int,
        port_id: ::std::os::raw::c_int,
        mac: *const Mac,
    ) -> ChipSdkError;
}
